// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       Role
  contactNo  String    @unique
  address    String?
  profileImg String?
  bookings   Booking[]
  reviews    Review[]
  news       News[]
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@map("user")
}

enum Role {
  super_admin
  admin
  user
}

model Category {
  id        String    @id @default(uuid())
  name      String
  services  Service[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("category")
}

model Service {
  id                String    @id @default(uuid())
  categoryId        String
  name              String
  validFrom         DateTime  @map("valid_from")
  validTill         DateTime  @map("valid_till")
  location          String
  price             Int
  person            Int
  isBooked          Boolean   @default(false)
  duration          String
  description       String
  facilities        String?
  whyChooseUs       String?   @map("why_choose_us")
  image             String
  availableQunatity Int       @map("available_quantity")
  reviews           Review[]
  categorires       Category  @relation(fields: [categoryId], references: [id])
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  Booking           Booking[]

  @@map("service")
}

model PaymentInfo {
  id                  String    @id @default(uuid())
  paymentMethod       String
  paypalEmail         String
  paymentStatus       String
  paypalTransactionId String?
  paypalPayerId       String?
  Booking             Booking[]
}

model Booking {
  id            String       @id @default(uuid())
  userId        String
  paymentInfoId String
  serviceId     String
  date          DateTime
  status        String
  service       Service      @relation(fields: [serviceId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  paymentInfo   PaymentInfo @relation(fields: [paymentInfoId], references: [id])
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  @@map("booking")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  serviceId String?
  newsId    String?
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  News      News?    @relation(fields: [newsId], references: [id])

  @@map("review")
}

model News {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  contentType String   @map("content_type")
  title       String
  content     String
  date        DateTime
  image       String
  reviews     Review[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("news")
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("faq")
}
