// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       Role
  contactNo  String
  address    String
  profileImg String
  bookings   Booking[]
  reviews    Review[]
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@map("user")
}

enum Role {
  super_admin
  admin
  user
}

model Category {
  id        String    @id @default(uuid())
  name      String
  services  Service[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("category")
}

model Service {
  id                String             @id @default(uuid())
  categoryId        String
  name              String
  location          String
  price             Int
  person            String
  duration          String
  description       String
  facilities        String?
  whyChooseUs       String?
  image             String
  availableServices AvailableService[]
  reviews           Review[]
  categorires       Category           @relation(fields: [categoryId], references: [id])
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  @@map("service")
}

model TimeSlots {
  id               String             @id @default(uuid())
  slotTime         DateTime           @map("slot_time")
  availableServices AvailableService[]
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
}

model AvailableService {
  id             String    @id @default(uuid())
  slotDate       DateTime  @map("slot_date")
  availableSeats Int       @map("available_seats")
  isBooked       Boolean   @default(false) @map("is_booked")
  serviceId      String    @map("service_id")
  service        Service   @relation(fields: [serviceId], references: [id])
  slotId         String    @map("slot_id")
  slot           TimeSlots @relation(fields: [slotId], references: [id])
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  Booking        Booking[]

  @@unique([slotId, serviceId, slotDate])
  @@map("available_services")
}

model Booking {
  id                 String           @id @default(uuid())
  userId             String
  serviceId          String
  date               DateTime
  status             String
  user               User             @relation(fields: [userId], references: [id])
  availableServiceId String           @map("available_service_id")
  availableService   AvailableService @relation(fields: [availableServiceId], references: [id])
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")

  @@map("booking")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  serviceId String
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("review")
}

model Blog {
  id          String   @id @default(uuid())
  contentType String
  title       String
  content     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("blog")
}
